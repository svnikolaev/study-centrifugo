import asyncio
import json
import os

import websockets
from dotenv import load_dotenv

load_dotenv()

CENTRIFUGO_WS_URL = os.getenv(
    'CENTRIFUGO_WS_URL', 'ws://localhost:8000/connection/websocket'
)
CHANNEL = os.getenv('CHANNEL', 'your-channel')
TOKEN = os.getenv('TOKEN')


async def connect(
    websocket: websockets.WebSocketServerProtocol, token: str
) -> None:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Centrifugo, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω.

    :param websocket: –í–µ–±-—Å–æ–∫–µ—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—â–µ–Ω–∏–µ
    :type websocket: websockets.WebSocketServerProtocol
    :param token: –¢–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    :type token: str
    """
    print('Connecting to Centrifugo...')
    connect_command = json.dumps({
        "id": 1,
        "connect": {"token": token}
    })
    await websocket.send(connect_command)
    response = await websocket.recv()
    print('Connected to Centrifugo:', response)


async def subscribe(
    websocket: websockets.WebSocketServerProtocol, channel: str
) -> None:
    """
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Centrifugo, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π
    –≤–µ–±-—Å–æ–∫–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É subscribe, –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç
    –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏.

    :param websocket: –í–µ–±-—Å–æ–∫–µ—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—â–µ–Ω–∏–µ
    :type websocket: websockets.WebSocketServerProtocol
    :param channel: –ö–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞
    :type channel: str
    """
    print('Subscribing to channel...')
    subscribe_command = json.dumps({
        "id": 2,
        "subscribe": {"channel": channel}
    })
    await websocket.send(subscribe_command)
    response = await websocket.recv()
    print(f'Subscribed to channel: {channel}, response:', response)


async def receive_messages(
    websocket: websockets.WebSocketServerProtocol
) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Centrifugo, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π
    –≤–µ–±-—Å–æ–∫–µ—Ç.

    –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ PING-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PONG-–æ—Ç–≤–µ—Ç.
    """
    async for message in websocket:
        try:
            parsed_messages = json.loads(message)
            if isinstance(parsed_messages, list):
                print(f'RECEIVED MULTIPLE MESSAGES ({len(parsed_messages)}):')
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö JSON-–æ–±—ä–µ–∫—Ç–æ–≤
                for msg in parsed_messages:
                    handle_message(msg)
            elif parsed_messages == {}:
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ Centrifugo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PING —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
                # –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                print("üîß Received PING...")
                await websocket.send(json.dumps({}))  # "{}" - —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                print("üîß Sent PONG")
            else:
                handle_message(parsed_messages)
        except json.JSONDecodeError as e:
            print(f'Failed to decode message "{message}": {e}')


def handle_message(message: dict) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Centrifugo.

    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º, –≤—ã–≤–æ–¥–∏—Ç –æ –Ω–µ–º–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    –í –æ–±—â–µ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    :type message: dict
    """
    if 'error' in message:
        print(f'Received error: {message["error"]}')
    elif 'method' in message and message['method'] == 'published':
        print(f'Received published event: {message}')
    else:
        print(f'Received message: {message}')


async def main():
    async with websockets.connect(CENTRIFUGO_WS_URL) as websocket:
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Centrifugo –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await connect(websocket, TOKEN)
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        await subscribe(websocket, CHANNEL)
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ÃÜ
        await receive_messages(websocket)


if __name__ == "__main__":
    asyncio.run(main())
